* TagTime Tools
  
This repo consists of several tools to deal with logs from [[https://github.com/tagtime/TagTime][TagTime]].
Until now there are tools to *merge* logs from different devices, to *import* tags from the Android app,
to *check* if tags are consistent with a controlled vocabulary and finally to apply some simple *rules*. 
** Commands
   The scripts can be executed either by calling the script directly e.g. through
#+BEGIN_SRC shell
  ./merge.py ARGS
  ./rules.py ARGS
  ...
#+END_SRC
or through the ~tagtimetools~ master-command and subcommands:
#+BEGIN_SRC shell
  ./tagtimetools merge ARGS
  ./tagtimetools rules ARGS
  ...
#+END_SRC

** Merging Tags
Tags from two different files are merged and the result printed out through
#+BEGIN_SRC shell
./merge.py PATH_TO_FIRST_LOG PATH_TO_SECOND_LOG
#+END_SRC
One can use the ~-o~ flag to write the results to a file.
When providing ~global tags~ through
#+BEGIN_SRC shell
./merge.py PATH_TO_FIRST_LOG PATH_TO_SECOND_LOG --global-tags afk,RETRO
#+END_SRC
one can assure that these tags are only in the resulting merge if they appear in both sets at the same time.
This is useful when one has multiple computers and want to track the tags when all computers are ~afk~.

** Importing Tags from the Android App
On a rooted phone one can export the TagTime database (usually stored at ~/data/data/bsoule.tagtime/databases/timepiedata~).
With 
#+BEGIN_SRC shell
./androidimport.py PATH_TO_DATABASE 
#+END_SRC
one can import the tags and print them to the screen. Again  using the ~-o~ flag one can write normal tagtime log files.

** Checking Tags
In order to detect typos and to restrict myself to predefined tags I use a controlled vocublary.
With 
#+BEGIN_SRC shell
./check.py PATH_TO_LOG PATH_TO_VOCABULARY_FILE 
#+END_SRC
I can check that all tags in the file are also in my vocabulary.
The vocabulary file is just a file with one tag at each line.

** Applying simple rules
I can apply simple rules using
#+BEGIN_SRC shell
./rules.py PATH_TO_LOG PATH_TO_RULES
#+END_SRC
where the rules file consists of triggers and actions seperated by a ~
e.g.
#+BEGIN_SRC shell
  ank ~ lrn
  car,trn ~ tvl
  cde ~ wrk cmp
#+END_SRC
means that each ~ank~ (Anki) tag triggers a ~lrn~ (Learn) tag, each ~car~ or ~trn~ (Train) tag triggers a ~tvl~ (Travel) tag, 
and each ~cde~ (Coding) tag triggers both a ~wrk~ (Work) tag as well as a ~cmp~ (Computer) tag.

I will maybe implement more complex rules in the future
** Invocation script
I merge tags from two different computers and a phone. Since the phone has no afk tags I use a script like the following
  #+BEGIN_SRC shell
    #!/usr/bin/env bash
    # Import
    ./androidimport.py $PHONE_DATABASE_FILE -o $PHONE_FILE

    # Check
    ./check.py $HOME_FILE $CONTROLLED_VOCABULARY --error-file $ERROR_FILE
    ./check.py $PHONE_FILE $CONTROLLED_VOCABULARY --error-file $ERROR_FILE
    ./check.py $WORKSTATION_FILE $CONTROLLED_VOCABULARY --error-file $ERROR_FILE

    # Merge
    ./merge.py $WORKSTATION_FILE $HOME_FILE -o $TEMPORARY_FILE --global-tags afk,RETRO,off
    ./merge.py $TEMPORARY_FILE $PHONE_FILE -o $TEMPORARY_FILE 

    # Rules
    ./rules.py $TEMPORARY_FILE $RULES -o $MERGED_FILE

    rm $TEMPORARY_FILE

  #+END_SRC
 
